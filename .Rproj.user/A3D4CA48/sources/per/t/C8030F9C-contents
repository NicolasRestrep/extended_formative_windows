---
title: "Different ways of measuring change"
author: "Nicolas Restrepo"
date: "2023-02-15"
output:
  html_document: 
    toc: true
    theme: journal 
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, warning = F, message = F, fig.align = "center")
```

## Set-up

We talked about exploring our results with different assumptions about what consitutes change. Here, I am going to present the results for several models that try to examine whether people 30 or less display more updating, across cohorts, when we consider different ways of conceptualizing what it means for someone to update their attitudes. Specifically, I am going to explore 4 ways of thinking about change: 

1) Any change: this is a binary indicator, which records whether people moved at all. This should be the noisiest dependent variable.
2) Total change: this is a continuous variable that records how much people moved around, regardless of direction. So a participant might have ended somewhere very close in wave 3 as their response in wave 1, but if they moved somewhere far away in wave 2, their total change would be quite high.
3) Crossed midpoint: this is a binary indicator that records whether the participant crossed the mid-point of the scale at any point.
4) Two points move: a binary indicator that records whether the participant ended - in the last wave - in a position that is at least two points away from where they started. 

## Strict and loose coding 

For many of the questions, we have response categories like "Don't Know" and "Haven't thought about it". These are usually coded towards the end of the scale, so just taking their coding at face value would imply that moving from these answers to one end of the scale is "easier" (at least in terms of distance). I think there are two broad ways of dealing with this issue: 

1) To accept that we cannot categorize how far "now knowing" is from say "strong democrat" and "strong republican". Moreover, it is qualitatively not the same as being in the middle of the scale as an independent. Therefore, we must just get rid of these cases. I call this strict filtering. 

2) Loose filtering keeps these responses but recodes them towards the middle of the scale. While it is true that being independent and apolitical are qualitatively different states, maybe for our purposes they are structurally equivalene in relationship to a latent variable of interest (democrat vs. republican). Loose filtering then keeps these cases and recodes them at the mid-point of the scale. 

I suspect this will not affect the outcomes too much as there usually were not that many cases in the "Don't Know" category. For some questions, NA was collapsed with "Have not thought about this", and in these cases I got rid of all those cases. 

## Preparing datasets 

We discussed building datasets where each row represented a person-question combination. I do this for each of the surveys and in total I end up with 7 total dataframes. Strict and loose versions of the dataframes for the ANES panels, and our long dataframe for the GSS. The coding was more straightforward for the latter so I just end up with that one dataframe. This is what the dataframes look like. 

```{r}
# Packages ----
library(tidyverse)
library(patchwork)
library(brms)
theme_set(theme_bw())
# Load Data ----
load("~/Documents/extended_formative_windows/Data/clean_anes5.Rdata")
load("~/Documents/extended_formative_windows/Data/clean_anes7.Rdata")
load("~/Documents/extended_formative_windows/Data/clean_anes9.Rdata")
load("~/Documents/extended_formative_windows/Data/clean_g6.Rdata")

# PARTYID - ANES56 ----
# Strict
a5_pid_s <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("party")) %>%
  filter(
    partyid_1 != 7,
    partyid_1 != 8,
    partyid_1 != 9,
    partyid_2 != 7,
    partyid_2 != 8,
    partyid_2 != 9,
    partyid_3 != 7,
    partyid_3 != 8,
    partyid_3 != 9
  ) %>%
  mutate(
    change_w2 = abs(partyid_2 - partyid_1),
    change_w3 = abs(partyid_3 - partyid_2),
    total_change_s = change_w2 + change_w3, 
    any_change_s = if_else(total_change_s >= 1, 1, 0), 
    crossed_midpoint_s = case_when(
      partyid_1 < 3 & partyid_2 > 3 ~ 1,
      partyid_1 > 3 & partyid_2 < 3 ~ 1,
      partyid_2 < 3 & partyid_3 > 3 ~ 1,
      partyid_2 > 3 & partyid_3 < 3 ~ 1,
      partyid_1 < 3 & partyid_3 > 3 ~ 1,
      partyid_1 > 3 & partyid_3 < 3 ~ 1,
      TRUE ~ 0
    ), 
    two_points_s = if_else(
      abs(partyid_3-partyid_1) >= 2, 1,0
    )
  ) %>% 
  select(id, age_1, total_change_s, any_change_s, crossed_midpoint_s, two_points_s) %>% 
  mutate(variable = "partyid")

# Recodes 7s and 8s into 3s to be less strict 
a5_pid_l <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("party")) %>%
  filter(
    partyid_1 != 9,
    partyid_2 != 9,
    partyid_3 != 9
  ) %>%
  mutate(
    across(contains("party"), 
            ~ case_when(
             . == 0 ~ 0,
             . == 1 ~ 1, 
             . == 2 ~ 2, 
             . == 3 ~ 3, 
             . == 4 ~ 4, 
             . == 5 ~ 5, 
             . == 6 ~ 6, 
             . == 7 ~ 3,
             . == 8 ~ 3, 
           )), 
    change_w2 = abs(partyid_2 - partyid_1),
    change_w3 = abs(partyid_3 - partyid_2),
    total_change_l = change_w2 + change_w3, 
    any_change_l = if_else(total_change_l >= 1, 1, 0), 
    crossed_midpoint_l = case_when(
      partyid_1 < 3 & partyid_2 > 3 ~ 1,
      partyid_1 > 3 & partyid_2 < 3 ~ 1,
      partyid_2 < 3 & partyid_3 > 3 ~ 1,
      partyid_2 > 3 & partyid_3 < 3 ~ 1,
      partyid_1 < 3 & partyid_3 > 3 ~ 1,
      partyid_1 > 3 & partyid_3 < 3 ~ 1,
      TRUE ~ 0
    ), 
    two_points_l = if_else(
      abs(partyid_3-partyid_1) >= 2, 1,0
    )
  ) %>% 
  select(id, age_1, total_change_l, any_change_l, crossed_midpoint_l, two_points_l) %>% 
  mutate(variable = "partyid")

# HELP BLACK - ANES56 ----

# Code for waves 1 & 3 
# 0                     0. NO OPINION
# 1                 1. AGREE STRONGLY
# 2    2. AGREE BUT NOT VERY STRONGLY
# 3           3. NOT SURE, IT DEPENDS
# 4 4. DISAGREE BUT NOT VERY STRONGLY
# 5              5. DISAGREE STRONGLY
# 8                             8. DK
# 9                             9. NA

# code for wave 2 

# 1                 1. AGREE STRONGLY
# 2   2. AGREE, BUT NOT VERY STRONGLY
# 3                       3. NOT SURE
# 4 4. DISAGREE BUT NOT VERY STRONGLY
# 5              5. DISAGREE STRONGLY
# 7                     7. NO OPINION
# 8                             8. DK
# 9                             9. NA

# Again, strict gets rid of 0, 8 and 9. 

a5_hlpblk_s <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("helpblk")) %>%
  # Recode the inconsistent coding here
  mutate(helpblk5_2 = ifelse(helpblk5_2==7, 0, helpblk5_2)) %>% 
  filter(
    # Strict filtering gets rid of more than half the sample
    helpblk5_1 != 0,
    helpblk5_1 != 8,
    helpblk5_1 != 9,
    helpblk5_2 != 0,
    helpblk5_2 != 8,
    helpblk5_2 != 9,
    helpblk5_3 != 0,
    helpblk5_3 != 8,
    helpblk5_3 != 9
  ) %>%
  mutate(
change_w2 = abs(helpblk5_2 - helpblk5_1),
change_w3 = abs(helpblk5_3 - helpblk5_2),
total_change_s = change_w2 + change_w3,
any_change_s = if_else(total_change_s >= 1, 1, 0),
crossed_midpoint_s = case_when(
  helpblk5_1 < 3 & helpblk5_2 > 3 ~ 1,
  helpblk5_1 > 3 & helpblk5_2 < 3 ~ 1,
  helpblk5_2 < 3 & helpblk5_3 > 3 ~ 1,
  helpblk5_2 > 3 & helpblk5_3 < 3 ~ 1,
  helpblk5_1 < 3 & helpblk5_3 > 3 ~ 1,
  helpblk5_1 > 3 & helpblk5_3 < 3 ~ 1,
  TRUE ~ 0
),
two_points_s = if_else(abs(helpblk5_3 - helpblk5_1) >= 2, 1, 0)
) %>%
  select(id,
         age_1,
         total_change_s,
         any_change_s,
         crossed_midpoint_s,
         two_points_s) %>%
  mutate(variable = "helpblk")
  
# Now do the loose version 
# We keep a much more substantial amount of the sample here

a5_hlpblk_l <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("helpblk")) %>%
  # Recode the inconsistent coding here
  mutate(helpblk5_2 = ifelse(helpblk5_2==7, 0, helpblk5_2)) %>% 
  filter(
    helpblk5_1 != 9,
    helpblk5_2 != 9,
    helpblk5_3 != 9
  ) %>% 
  mutate( 
    across(
      contains("help"), 
      ~ case_when(
        . == 0 ~ 3, 
        . == 1 ~ 1, 
        . == 2 ~ 2, 
        . == 3 ~ 3, 
        . == 4 ~ 4, 
        . == 5 ~ 5, 
        . == 8 ~ 3
      )
    ), 
    change_w2 = abs(helpblk5_2 - helpblk5_1),
    change_w3 = abs(helpblk5_3 - helpblk5_2),
    total_change_l = change_w2 + change_w3,
    any_change_l = if_else(total_change_l >= 1, 1, 0),
    crossed_midpoint_l = case_when(
      helpblk5_1 < 3 & helpblk5_2 > 3 ~ 1,
      helpblk5_1 > 3 & helpblk5_2 < 3 ~ 1,
      helpblk5_2 < 3 & helpblk5_3 > 3 ~ 1,
      helpblk5_2 > 3 & helpblk5_3 < 3 ~ 1,
      helpblk5_1 < 3 & helpblk5_3 > 3 ~ 1,
      helpblk5_1 > 3 & helpblk5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_l = if_else(abs(helpblk5_3 - helpblk5_1) >= 2, 1, 0)
    ) %>% 
  select(id, 
         age_1, 
         total_change_l, 
         any_change_l, 
         crossed_midpoint_l, 
         two_points_l) %>% 
  mutate(variable = "helpblk")

# INTEGRATE - ANES56 ----

# Code wave 1 & 3 

# 0                     0. NO OPINION
# 1                 1. AGREE STRONGLY
# 2    2. AGREE BUT NOT VERY STRONGLY
# 3           3. NOT SURE, IT DEPENDS
# 4 4. DISAGREE BUT NOT VERY STRONGLY
# 5              5. DISAGREE STRONGLY
# 8                             8. DK
# 9                             9. NA

# Same quirk as before where 7 refers to no opinion on the 2nd wave 

# Let's do the strict version 

a5_integrate_s <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("integrate")) %>%
  # Recode the inconsistent coding here
  mutate(integrate5_2 = ifelse(integrate5_2 == 7, 0, integrate5_2)) %>%
  filter(
    # Strict filtering gets rid of more than half the sample
    integrate5_1 != 0,
    integrate5_1 != 8,
    integrate5_1 != 9,
    integrate5_2 != 0,
    integrate5_2 != 8,
    integrate5_2 != 9,
    integrate5_3 != 0,
    integrate5_3 != 8,
    integrate5_3 != 9
  ) %>%
  mutate(
    change_w2 = abs(integrate5_2 - integrate5_1),
    change_w3 = abs(integrate5_3 - integrate5_2),
    total_change_s = change_w2 + change_w3,
    any_change_s = if_else(total_change_s >= 1, 1, 0),
    crossed_midpoint_s = case_when(
      integrate5_1 < 3 & integrate5_2 > 3 ~ 1,
      integrate5_1 > 3 & integrate5_2 < 3 ~ 1,
      integrate5_2 < 3 & integrate5_3 > 3 ~ 1,
      integrate5_2 > 3 & integrate5_3 < 3 ~ 1,
      integrate5_1 < 3 & integrate5_3 > 3 ~ 1,
      integrate5_1 > 3 & integrate5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_s = if_else(abs(integrate5_3 - integrate5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_s,
         any_change_s,
         crossed_midpoint_s,
         two_points_s) %>%
  mutate(variable = "integrate")


a5_integrate_l <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("integrate")) %>%
  # Recode the inconsistent coding here
  mutate(integrate5_2 = ifelse(integrate5_2 == 7, 0, integrate5_2)) %>%
  filter(
    integrate5_1 != 9,
    integrate5_2 != 9,
    integrate5_3 != 9
  ) %>% 
  mutate( 
    across(
      contains("integrate"), 
      ~ case_when(
        . == 0 ~ 3, 
        . == 1 ~ 1, 
        . == 2 ~ 2, 
        . == 3 ~ 3, 
        . == 4 ~ 4, 
        . == 5 ~ 5, 
        . == 8 ~ 3
      )
    ),
    change_w2 = abs(integrate5_2 - integrate5_1),
    change_w3 = abs(integrate5_3 - integrate5_2),
    total_change_l = change_w2 + change_w3,
    any_change_l = if_else(total_change_l >= 1, 1, 0),
    crossed_midpoint_l = case_when(
      integrate5_1 < 3 & integrate5_2 > 3 ~ 1,
      integrate5_1 > 3 & integrate5_2 < 3 ~ 1,
      integrate5_2 < 3 & integrate5_3 > 3 ~ 1,
      integrate5_2 > 3 & integrate5_3 < 3 ~ 1,
      integrate5_1 < 3 & integrate5_3 > 3 ~ 1,
      integrate5_1 > 3 & integrate5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_l = if_else(abs(integrate5_3 - integrate5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_l,
         any_change_l,
         crossed_midpoint_l,
         two_points_l) %>%
  mutate(variable = "integrate")

# GOVJOBS - ANES56 -----

# Thankfully same structure as before 

# Let's do the strict version 

a5_govjobs_s <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("govjob")) %>%
  # Recode the inconsistent coding here
  mutate(govjob5_2 = ifelse(govjob5_2 == 7, 0, govjob5_2)) %>%
  filter(
    # Strict filtering gets rid of more than half the sample
    govjob5_1 != 0,
    govjob5_1 != 8,
    govjob5_1 != 9,
    govjob5_2 != 0,
    govjob5_2 != 8,
    govjob5_2 != 9,
    govjob5_3 != 0,
    govjob5_3 != 8,
    govjob5_3 != 9
  ) %>%
  mutate(
    change_w2 = abs(govjob5_2 - govjob5_1),
    change_w3 = abs(govjob5_3 - govjob5_2),
    total_change_s = change_w2 + change_w3,
    any_change_s = if_else(total_change_s >= 1, 1, 0),
    crossed_midpoint_s = case_when(
      govjob5_1 < 3 & govjob5_2 > 3 ~ 1,
      govjob5_1 > 3 & govjob5_2 < 3 ~ 1,
      govjob5_2 < 3 & govjob5_3 > 3 ~ 1,
      govjob5_2 > 3 & govjob5_3 < 3 ~ 1,
      govjob5_1 < 3 & govjob5_3 > 3 ~ 1,
      govjob5_1 > 3 & govjob5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_s = if_else(abs(govjob5_3 - govjob5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_s,
         any_change_s,
         crossed_midpoint_s,
         two_points_s) %>%
  mutate(variable = "govjobs")


a5_govjobs_l <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("govjob")) %>%
  # Recode the inconsistent coding here
  mutate(govjob5_2 = ifelse(govjob5_2 == 7, 0, govjob5_2)) %>%
  filter(
    govjob5_1 != 9,
    govjob5_2 != 9,
    govjob5_3 != 9
  ) %>% 
  mutate( 
    across(
      contains("govjob"), 
      ~ case_when(
        . == 0 ~ 3, 
        . == 1 ~ 1, 
        . == 2 ~ 2, 
        . == 3 ~ 3, 
        . == 4 ~ 4, 
        . == 5 ~ 5, 
        . == 8 ~ 3
      )
    ),
    change_w2 = abs(govjob5_2 - govjob5_1),
    change_w3 = abs(govjob5_3 - govjob5_2),
    total_change_l = change_w2 + change_w3,
    any_change_l = if_else(total_change_l >= 1, 1, 0),
    crossed_midpoint_l = case_when(
      govjob5_1 < 3 & govjob5_2 > 3 ~ 1,
      govjob5_1 > 3 & govjob5_2 < 3 ~ 1,
      govjob5_2 < 3 & govjob5_3 > 3 ~ 1,
      govjob5_2 > 3 & govjob5_3 < 3 ~ 1,
      govjob5_1 < 3 & govjob5_3 > 3 ~ 1,
      govjob5_1 > 3 & govjob5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_l = if_else(abs(govjob5_3 - govjob5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_l,
         any_change_l,
         crossed_midpoint_l,
         two_points_l) %>%
  mutate(variable = "govjobs")

# BUILDSCHOOLS - ANES56 ----
# Thankfully same structure as before 

# Let's do the strict version 

a5_bldschool_s <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("bldschls")) %>%
  # Recode the inconsistent coding here
  mutate(bldschls5_2 = ifelse(bldschls5_2 == 7, 0, bldschls5_2)) %>%
  filter(
    # Strict filtering gets rid of more than half the sample
    bldschls5_1 != 0,
    bldschls5_1 != 8,
    bldschls5_1 != 9,
    bldschls5_2 != 0,
    bldschls5_2 != 8,
    bldschls5_2 != 9,
    bldschls5_3 != 0,
    bldschls5_3 != 8,
    bldschls5_3 != 9
  ) %>%
  mutate(
    change_w2 = abs(bldschls5_2 - bldschls5_1),
    change_w3 = abs(bldschls5_3 - bldschls5_2),
    total_change_s = change_w2 + change_w3,
    any_change_s = if_else(total_change_s >= 1, 1, 0),
    crossed_midpoint_s = case_when(
      bldschls5_1 < 3 & bldschls5_2 > 3 ~ 1,
      bldschls5_1 > 3 & bldschls5_2 < 3 ~ 1,
      bldschls5_2 < 3 & bldschls5_3 > 3 ~ 1,
      bldschls5_2 > 3 & bldschls5_3 < 3 ~ 1,
      bldschls5_1 < 3 & bldschls5_3 > 3 ~ 1,
      bldschls5_1 > 3 & bldschls5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_s = if_else(abs(bldschls5_3 - bldschls5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_s,
         any_change_s,
         crossed_midpoint_s,
         two_points_s) %>%
  mutate(variable = "bldschool")


a5_bldschool_l <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("bldschls")) %>%
  # Recode the inconsistent coding here
  mutate(bldschls5_2 = ifelse(bldschls5_2 == 7, 0, bldschls5_2)) %>%
  filter(
    bldschls5_1 != 9,
    bldschls5_2 != 9,
    bldschls5_3 != 9
  ) %>% 
  mutate( 
    across(
      contains("bldschls"), 
      ~ case_when(
        . == 0 ~ 3, 
        . == 1 ~ 1, 
        . == 2 ~ 2, 
        . == 3 ~ 3, 
        . == 4 ~ 4, 
        . == 5 ~ 5, 
        . == 8 ~ 3
      )
    ),
    change_w2 = abs(bldschls5_2 - bldschls5_1),
    change_w3 = abs(bldschls5_3 - bldschls5_2),
    total_change_l = change_w2 + change_w3,
    any_change_l = if_else(total_change_l >= 1, 1, 0),
    crossed_midpoint_l = case_when(
      bldschls5_1 < 3 & bldschls5_2 > 3 ~ 1,
      bldschls5_1 > 3 & bldschls5_2 < 3 ~ 1,
      bldschls5_2 < 3 & bldschls5_3 > 3 ~ 1,
      bldschls5_2 > 3 & bldschls5_3 < 3 ~ 1,
      bldschls5_1 < 3 & bldschls5_3 > 3 ~ 1,
      bldschls5_1 > 3 & bldschls5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_l = if_else(abs(bldschls5_3 - bldschls5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_l,
         any_change_l,
         crossed_midpoint_l,
         two_points_l) %>%
  mutate(variable = "bldschool")

# PRIVATE POWER - ANES56 ----
# Thankfully same structure as before 

# Let's do the strict version 

a5_private_s <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("prvtpwr")) %>%
  # Recode the inconsistent coding here
  mutate(prvtpwr5_2 = ifelse(prvtpwr5_2 == 7, 0, prvtpwr5_2)) %>%
  filter(
    # Strict filtering gets rid of more than half the sample
    prvtpwr5_1 != 0,
    prvtpwr5_1 != 8,
    prvtpwr5_1 != 9,
    prvtpwr5_2 != 0,
    prvtpwr5_2 != 8,
    prvtpwr5_2 != 9,
    prvtpwr5_3 != 0,
    prvtpwr5_3 != 8,
    prvtpwr5_3 != 9
  ) %>%
  mutate(
    change_w2 = abs(prvtpwr5_2 - prvtpwr5_1),
    change_w3 = abs(prvtpwr5_3 - prvtpwr5_2),
    total_change_s = change_w2 + change_w3,
    any_change_s = if_else(total_change_s >= 1, 1, 0),
    crossed_midpoint_s = case_when(
      prvtpwr5_1 < 3 & prvtpwr5_2 > 3 ~ 1,
      prvtpwr5_1 > 3 & prvtpwr5_2 < 3 ~ 1,
      prvtpwr5_2 < 3 & prvtpwr5_3 > 3 ~ 1,
      prvtpwr5_2 > 3 & prvtpwr5_3 < 3 ~ 1,
      prvtpwr5_1 < 3 & prvtpwr5_3 > 3 ~ 1,
      prvtpwr5_1 > 3 & prvtpwr5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_s = if_else(abs(prvtpwr5_3 - prvtpwr5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_s,
         any_change_s,
         crossed_midpoint_s,
         two_points_s) %>%
  mutate(variable = "private")


a5_private_l <- clean_anes5 %>%
  mutate(id = 1:nrow(.)) %>%
  select(id, age_1, contains("prvtpwr")) %>%
  # Recode the inconsistent coding here
  mutate(prvtpwr5_2 = ifelse(prvtpwr5_2 == 7, 0, prvtpwr5_2)) %>%
  filter(
    prvtpwr5_1 != 9,
    prvtpwr5_2 != 9,
    prvtpwr5_3 != 9
  ) %>% 
  mutate( 
    across(
      contains("prvtpwr"), 
      ~ case_when(
        . == 0 ~ 3, 
        . == 1 ~ 1, 
        . == 2 ~ 2, 
        . == 3 ~ 3, 
        . == 4 ~ 4, 
        . == 5 ~ 5, 
        . == 8 ~ 3
      )
    ),
    change_w2 = abs(prvtpwr5_2 - prvtpwr5_1),
    change_w3 = abs(prvtpwr5_3 - prvtpwr5_2),
    total_change_l = change_w2 + change_w3,
    any_change_l = if_else(total_change_l >= 1, 1, 0),
    crossed_midpoint_l = case_when(
      prvtpwr5_1 < 3 & prvtpwr5_2 > 3 ~ 1,
      prvtpwr5_1 > 3 & prvtpwr5_2 < 3 ~ 1,
      prvtpwr5_2 < 3 & prvtpwr5_3 > 3 ~ 1,
      prvtpwr5_2 > 3 & prvtpwr5_3 < 3 ~ 1,
      prvtpwr5_1 < 3 & prvtpwr5_3 > 3 ~ 1,
      prvtpwr5_1 > 3 & prvtpwr5_3 < 3 ~ 1,
      TRUE ~ 0
    ),
    two_points_l = if_else(abs(prvtpwr5_3 - prvtpwr5_1) >= 2, 1, 0)
  ) %>%
  select(id,
         age_1,
         total_change_l,
         any_change_l,
         crossed_midpoint_l,
         two_points_l) %>%
  mutate(variable = "private")

a5_complete_strict <- rbind(a5_bldschool_s, 
                            a5_govjobs_s, 
                            a5_hlpblk_s, 
                            a5_integrate_s, 
                            a5_pid_s, 
                            a5_private_s) %>% 
  mutate(young = if_else(age_1 <= 30, 1, 0))

glimpse(a5_complete_strict)
```

## Modeling 

For each of the four ways of measuring change, I am going to run a regression - either linear or logistic - adding random intercepts for individuals and questions. We are interested in the coefficient for `young` which simply captures whether - in the first wave of the panel - respondents were 30 years old or younger. I am going to add a random slope for `young` at the level of question, allowing the effect of age to vary across different questions. 

This is the form the models take: 

```{r, echo = T, eval = F}

a7s_total_m <- brm(total_change_s ~ (1 | id) + (young | variable) + young, 
                   data = a7_complete_strict,
                   family = "gaussian", 
                   backend = "cmdstanr", 
                   cores = 6)

```

## Results 

Okay, now I am going to explore the results. There is a lot of information here. To present our results efficiently I am going to make a coefficient plot, where we get the 95% confidence interval for the estimated slope for each variable. I am going to facet the results by dependent variable: `any_change`, `total_change`, `crossed`, `two_points`. The colors will represent the cohort (dataset) where we are pulling the data from.

```{r}
model_paths <- list.files(path="../Models", pattern=".rds$", all.files=TRUE,
                          full.names=TRUE, recursive = T)

all_coefficients <- data.frame()

for (i in 1:length(model_paths)) {
  path <- model_paths[[i]]
  
  model <- read_rds(path)
  
  young_variance <- coef(model)$variable[, , 'young'] %>%
    as.data.frame()
  
  name <- str_remove(path, "../Models/")
  
  young_variance <- young_variance %>%
    mutate(model = substr(name, 1, 3),
           change_type = str_extract(name, "any|crossed|total|twopoints"),
           variable = rownames(young_variance))
  
  all_coefficients <- rbind(all_coefficients, young_variance)
}

all_coefficients %>% 
  filter(model %in% c("a5s", 
                      "a7s", 
                      "a9s", 
                      "gss")) %>% 
  ggplot(aes(x = variable, y = Estimate, col = model)) +
  geom_pointrange(aes(ymin = `Q2.5`, 
                      ymax = `Q97.5`), 
                  position = position_dodge(width = 0.8)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "darkred") +
  facet_wrap(~ change_type) + 
  coord_flip() +
  labs(title = "Strict filtering")

```

It's hard to see any patterns. We do notice that for questions like `partyid` and `libcon`, young people tend to display more change, even across conceptualizations. For the `any_change` models, the `partyid` variable almost displays the exact pattern we would expect to see should attitudinal updating be icnreasing among young people. Each subsequent cohort for the ANES displays more updating among young people. But the coefficient for the `gss` breaks the pattern. It is important to note that `any_change` is the noisest possible estimate, and that drawing conclusions for it might be fault-prone. 

Let's see whether we see anything different with the lose coding. 

```{r}
all_coefficients %>% 
  filter(model %in% c("a5l", 
                      "a7l", 
                      "a9l", 
                      "gss")) %>% 
  ggplot(aes(x = variable, y = Estimate, col = model)) +
  geom_pointrange(aes(ymin = `Q2.5`, 
                      ymax = `Q97.5`), 
                  position = position_dodge(width = 0.8)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "darkred") +
  facet_wrap(~ change_type) + 
  coord_flip() +
  labs(title = "Loose filtering")

```

The patterns are very similar. 

I think what we can say is that young people seem to - in general - display more movement in these scales. This is the most pronounced in the noisiest measure of change: `any_change`. We find no evidence of patterns of differential updating across cohorts. 